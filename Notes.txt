!!!! GENERAL NOTES !!!!!
In order for Specificaton class to be properly mapped when sending it through the POST (if the desired result is for it to be mapped directly from the recieved
request JSON), it needs to have a default constructor and setters and non final fields!!!!


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
First Section

///////////////////////////////////////
First video /////////////////////////// - EJBs and CDI managed beans
///////////////////////////////////////

What is the stateless annotation? -> https://stackoverflow.com/questions/13487987/where-to-use-ejb-3-1-and-cdi/13504763#13504763
stateless vs stateful -> A Stateful bean will have state associated with it for each request from the same client. Stateless beans have no client specific state and a single instance could be used concurrently, threadsafe, between multiple clients requests.

How to tell if its EJB or CDI?
EJB -> has @Stateless @Stateful or @Singleton annotated on the class
CDI -> has no class annotation

///////////////////////////////////////
second video ////////////////////////// - CDI producers
///////////////////////////////////////

producers? -> a way to inject common values for enums  @Produces annotation -> can be used both in methods or fields

///////////////////////////////////////
third video /////////////////////////// - Qualifiers
///////////////////////////////////////

Qualifier annotations -> make sure the default stuff is being assigned to it -> @Named works but it can be ambigous and not type safe -> create custom qualifer annotation, see @Diesel in the project


///////////////////////////////////////
fourth video ////////////////////////// - Scopes
///////////////////////////////////////

Scopes ->

EJB
@Stateless -> pooled by container, unsure which instance is used when a request arrives. Should never have data or state
@Statefull -> its user request scopped and its maintained throughout the request, can contain data or state
@Singleton -> locked single instance for the whole application

CDI
@ApplicationScopped -> similar to @Singleton
@RequestScopped -> similar to @Statefull
@Dependent -> default scope no annotation needed, these depend on the injection point lifecycle: carfactory example -> the carRepository lifecycle is dependent on the carfactory lifecycle and only 1 is pooled

///////////////////////////////////////
fifth video /////////////////////////// - Events
///////////////////////////////////////

Events -> Domain events, Synchronous

Perfect way to couple logic loosely together, needs an Event<T> in which T is a POJO containing the necessary data and then
an observer class watching for the event fired on that class that implements some logic.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Second section

///////////////////////////////////////
First video /////////////////////////// - JAX-RS resources
///////////////////////////////////////

Http endpoints -> JAX RS
JAXRSConfiguration extends Application -> defines the root path and other application configuration
car resource -> path defines the path after baseUrl/JAXRSConfigurationPath/finalPath
Produces annotation on class means that all the endpoints will produce that, further specification can be done in every endpoint
@GET, @POST , etc... the general use HTTP methods
In case of specification param on the get retrieve cars !!!!!!!!!POJO needs a default constructor + full constructor and the POJO fields cannot be final!!!!!!!!

///////////////////////////////////////
second video ////////////////////////// Integrating Json-B
///////////////////////////////////////

Integrating JSON-B from JSON binding
@JsonbTransient -> field wont be serialized when converting obj to byte
@JsonbProperty -> replaces the key name on the final json conversion to the string present on the annotation


///////////////////////////////////////
third video /////////////////////////// - Integrating JSON-P
///////////////////////////////////////

JSON - P -> creating and using JSON objects with java 8 streams
JsonArray -> type that returns an Array of Json objects as response
JsonObject -> type that represents the json object, can be accessed the same way as it is in JS
Json.createObjectBuilder() -> initializes a json object and returns it so it is possible to chain add and other nested objects too


!!!!Removed specification default constructor (and final keyword form fields) since it is now immutable since it is only created and used in a single method!!!

///////////////////////////////////////
fourth video ////////////////////////// - Custom HTTP responses
///////////////////////////////////////

URI and using response -> USE URIInfo to dynamically build the URI through the context.
both of these objects use the builder pattern

///////////////////////////////////////
fifth video /////////////////////////// - Validating communication
///////////////////////////////////////

JaxRS validations -> @NotNull , @Size , @Min, @Max, @Email... etc
@Valid -> runes the validations for the class
@QueryParam("filter") --> this reads the parameter sent in the URL (URL/?filter=...)
CUSTOM VALIDATOR -> see EnvironmentalFiendly annotation -> EnvironmentalFriendlyValidator -> annontation in filed, param, etc
!!!This validator was made for specification, it is only meant for the createCar endpoint!!!!
Another validation option is to use the Validator from javax.validation.Validator;


///////////////////////////////////////
sixth video /////////////////////////// - Exception handling
///////////////////////////////////////

JaxRS can intercept exceptions and build a custom response for it, it needs the specific exception created
the handler created -> see CarCreationExceptionHandler with the @Provider annotation
See also ConstrainViolationExceptionHandler -> it builds a custom response to any bean validation exception

However, if CarCreationException extends runtimeException it will be logged, this is not the desired effect.
A solution is to implement the throws in the method (polutes the programming model). Another solution is to add @ApplicationException
So with the annotation the exception will no longer be wrapped as an EJB exception but as a ApplicationException

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Third section

///////////////////////////////////////
First video /////////////////////////// - Mapping Domain entities with JPA
///////////////////////////////////////

Annotate domain model with @Entity to map it, @Table to define the table name --> see Car model
persistance.xml MUST BE inside the folder src/main/resouces/META-INF
must define the Persistence unit
Entity manager can be instanced in the controller with @PersistenceContext with optional string to point to a specific one

@NamedQuerries(
{@NamedQuery(name ="..." query = "JQL query statement")}
) -> This can be done to make easy to use general queries. to add JQL parameters do ?1 , ?2 and etc, when creating the query,
add .setParameter(1, "someString") to set the parameter for example.
OR
use :parameterName and then .setparameter("parameterName", "some str or object")

entityManager.find(ModelClass.class, "ID string or number") -> to find a specific entity in the db.

///////////////////////////////////////
second video ////////////////////////// - Entity Relations
///////////////////////////////////////

for enum types that need to be persisted -> @Enumerated(EnumType.STRING) from string enums.

Seat model has a SeatMaterial which is an enum
Seat model has a Seatbelt is domain driven design value object which means it is not an entity so we dont care if its identifiable
SeatBelt has a SeatBeltModel which is an enum

To relate an entity with another one use @OneToMany, OneToOne, etc.
cascade ->  CascadeType.All when creating a new one it will recursively create all the other entities
fetch -> fetchType.Eager will do eager fetching

@JoinColumn(name = "seats", nullable = false) --> this will be the name of the column with the external key

domain driven design value object -> should be annotated with @Embedded when they are fields in other entities and
the class should have @Embeddable

This means that the SeatBelt is a Embeddable it will take every field it has (SeatBeltModel enum) and put them in a collumn
on the seats table.

///////////////////////////////////////
third video /////////////////////////// - Datasources
///////////////////////////////////////

Not so clear on how to configure this, extra investigation is needed. Is the datasource currently configured, making an in-memory postgres db???

///////////////////////////////////////
fourth video ////////////////////////// - Transactions
///////////////////////////////////////

@TransactionAttribute(TransactionAttributeType.REQUIRED) // This is the default value, it creates a new transaction if it wasnt called in another transaction context
TransactionAttributeType.REQUIRED --> will always create a new transaction and suspend the outer transaction if it exists

!!! IMPORTANT !!!
Only EJB beans come with transactions, CDI beans need to be anottated with @Transactional to create a transaction.
//@Transactional(Transactional.TxType.REQUIRED) --> example on how to make the CDI bean create a transaction if one does not exist already

!!! IMPORTANT 2 !!!
thrown Application exceptions DO NOT cause the transaction to stop or roll back since this is a checked exception that needs to be declared
in method signature, so it means that this expcetion is "expected" in other words, it means it is handled and does not require a rollback.

RuntimeExceptions and not expected and these are system exceptions so they ar enot handled or "expected". This leads to transaction rollback.

<On the exception class>
To make ApplicationExceptions rollback transactions they need to be annotated with:@ApplicationException(rollback = true) see CarStorageException

<On the CDI bean and EJB bean (see CarFactory)>
//@Transactional(rollbackOn = CarStorateException.class) --> example on how to make the transaction rollback on a specific exception even for CDI beans
//@Transactional(rollbackOn = CarStorateException.class, dontRollbackOn = ConstraintViolationException.class, value = Transactional.TxType.REQUIRED) -> example of the usage of this annotation java EE7

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fourth section , cross-cutting concers and concers that in the application domain itself and not business logic concerned suchs as caching and logging

///////////////////////////////////////
First video /////////////////////////// - Interceptors
///////////////////////////////////////

Annotations: 1 - @Interceptors, 2 - @Interceptor and 3 - @AroundInvoke
1 -> use in the method to be intercepted
2 -> Use in the class that will be the interceptor
3 -> Use this annotation in the interceptor method will be invoked around the intercepted method (See ProcessTrackingInterceptor for an example)

Also see tracking interceptor for an example of what to do when a method is intercepted.

!!!IMPORTANT!!!
In order for interceptors to work they need at least on interception binding.

///////////////////////////////////////
second video ////////////////////////// - Binding custom interceptors
///////////////////////////////////////

if we do not wish to tightly couple interceptors we can use custom interceptor binding

See pers.ricardo.control.Tracked for an example
This is used to track our business logic and is annotated with @InterceptorBinding

@Tracked(ProcessTracker.Category.MANUFACTURE) //This is way to track the method without it being tightly coupled.
Make sure the Tracked annotation has a value() method with reference to something. It is also a @Nonbinding attribute
because we only have 1 interceptor and this interceptor handles all the specific values. In other words, the interceptor
lookup will not be influenced by the values.

the @Tracked(ProcessTracker.Category.MANUFACTURE) also needs to be used in the ProcessTrackingInterceptor to make it not tightly coupled.
See the ProcessTrackingInterceptor method to see how to handle passed context info, Tracked annotation value for example.

The @Tracked(ProcessTracker.Category.MANUFACTURE) COULD ALSO BE USED TO BIND IN THE CLASS. see CarManufacturer

In order to specify when the tracker is activated it is needed one of the two:
Annotate the class with @Priority(Interceptor.Priority.APPLICATION)
OR
configure the beans.xml, inside <beans> tag, put:
<interceptors>
    <class> CLASS NAME INCLUDING PACKAGE </class>
</interceptors


///////////////////////////////////////
third video /////////////////////////// - Configuring Java EE applications
///////////////////////////////////////

It is another way of retrieving default values for variables or even configuration value.
For a default field example: see "CarFactory.java" identifier prefix
It requires a Custom Qualifier annotation, in this case we call it config so @Config("configKeyString")
This annotation itself requires the @Qualifier and the non-binding value aspect:
    @Nonbinding
    String value();
Then on the ConfigurationExposer it is where we produce the value:
    @Produces
        @Config("unsused")
        public String exposeConfig(InjectionPoint injectionPoint) {
        }
this method takes the injection point and the value passed on by the qualifier annotation and may search a file or DB for the value.
!!! IMPORTANT !!!
If we get the value through a file it is required to make the bean application scopped so it will always read the file everytime it is called.
!!!!!!!!!!!!!!!!!!!! This class is a good example how to build the stream that gets the config file!!!!!!!!!!!!!!!!!!!!!!!!!

///////////////////////////////////////
fourth video ////////////////////////// - Caching
///////////////////////////////////////

Custom cache or using Jcache

Custom cache -> see CarCache.java for a custom in-memory cache built with a map which gets all the cars present on application startup
!!!! THIS CACHE WAS USED IN CarManufacturer TO RETRIEVE ALL CARS, IT SHOULD LEAD TO STRANGE BEHAVIOUR IF WE INSERT A CAR AND TRY TO CHECK DB IF ITS THERE AFTERWARDS!!!!!
This custom cache can also be done via custom interceptor!!!!

This can be done with caching frameworks. Like JCache

///////////////////////////////////////
fourth video ////////////////////////// - Logging
///////////////////////////////////////

This is a very complex topic as there are many aspects to it such as performance, synchronization, log leves, log file format, code obfuscation and the choice of technology among others.

The custom made logger, in CarManufacturer.java (Fatalogger)
It can also be logging through a Producer

This project contains two implementations of a custom logger, one is done through normal implementation and another makes use of java SE8 classes


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fifth section - Asynchronous behaviour | async EJB | async CDI events | Managed threads | Define and use timers | async jax rs resources

///////////////////////////////////////
First video /////////////////////////// - Asynchronous EJBs
///////////////////////////////////////

How to define async EJB, @Asynchronus, Future<T> and AsyncResult<T>, impact on scopes

See CarProcessor for an example of an Asynchronus EJB, the @Asynchronus ca be used in method level or at class level

Can either return Future<T> or be void (fire and forget)

Scopes are important because the scope could be done by the time the async method is proccessed. So injecting beans with greater scopes can create problems.

///////////////////////////////////////
second video ////////////////////////// - Asynchronous CDI events
///////////////////////////////////////

One way of making te CarCreatedEvent async, would be add the annotations @Stateless and @Asynchronus.

Another way it so change the listener annotation from @Observes to @ObservesAsync

Synchronous events can also be further customized with @Observes(during = TransactionPhase...) to change how it is handled, if its during after or before the transaction
this means the event wont be handled directly in the business execution.

///////////////////////////////////////
third video /////////////////////////// - Managed Threads
///////////////////////////////////////

We should not start the threading manually, it should always be done by the container. Oterwise we create potential resouce leaks.
In order to create new Threads and let the container handle them, use the Message ExecutorService.

See carprocessor for extra details on how to handle streams if we had a stream. It would have to be handled by a jdk thread pool and not the application container thread pool.

//////////////////////////////////////
fourth video ///////////////////////// - Timers
//////////////////////////////////////

Scheduled jobs -> EJB, @Schedule, @Startup

CarCache.logCars() -> Since this is a Singleton that is always created on startup, we can annotate the method @Schedule. it uses linux cron notation

Scope differences:
If cache was not annotated with @Startup and still had @Singleton we would not be sure when the schedule would start since the singleton would only be
instanced when it was called business-wise. After it was instanced the first the schedule would be stable.

If it is a EJB annotated with Statless or Stateful the schedule would run everytime the instance is created.

All of the above is valid for EJB.

---> for cdi beans, use ManagedScheduledExecutorService. See CarFactory to get an example on how to schedule a CDI managed bean

///////////////////////////////////////
Fifth video /////////////////////////// - Asynchronous JAX-RS resouces
///////////////////////////////////////


